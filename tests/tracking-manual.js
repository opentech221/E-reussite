// ============================================================================
// TESTS MANUELS - Syst√®me Tracking Maison
// Date: 11 octobre 2025
// Instructions: Copier/coller dans la console du navigateur
// ============================================================================

// ============================================================================
// PR√â-REQUIS
// ============================================================================
// 1. Application lanc√©e : npm run dev
// 2. User connect√©
// 3. Console ouverte : F12 ‚Üí Console
// ============================================================================

// ============================================================================
// TEST 1 : V√©rifier import du service
// ============================================================================
console.log('üß™ Test 1 : Import dubService');
const dubServiceTest = await import('./src/services/dubService.js');
console.log('‚úÖ dubService import√©:', Object.keys(dubServiceTest.default));
// Attendu: ['createCourseLink', 'createReferralLink', 'getCustomLinkAnalytics', 'createCertificateLink']

// ============================================================================
// TEST 2 : Cr√©er un lien cours
// ============================================================================
console.log('\nüß™ Test 2 : Cr√©ation lien cours');

// R√©cup√©rer user connect√©
const { data: { user } } = await window.supabase.auth.getUser();
console.log('üë§ User:', user.email);

// Cr√©er lien cours
const courseLink = await dubServiceTest.default.createCourseLink(
  'https://localhost:5173/course/1',
  {
    userId: user.id,
    resourceId: 'test-course-1',
    slug: `test-${Date.now()}`, // Cl√© unique
    title: 'Test Course - ' + new Date().toLocaleString('fr-FR'),
    description: 'Test de cr√©ation de lien',
    tags: ['test', 'demo']
  }
);

console.log('‚úÖ Lien cr√©√©:', courseLink);
console.log('üîó Short Link:', courseLink.shortLink);
console.log('üîë Key:', courseLink.key);
console.log('üÜî ID:', courseLink.id);

// Copier dans presse-papier (√† faire manuellement)
console.log('\nüìã Copier ce lien et l\'ouvrir dans un nouvel onglet:');
console.log(courseLink.shortLink);

// ============================================================================
// TEST 3 : V√©rifier insertion dans BDD
// ============================================================================
console.log('\nüß™ Test 3 : V√©rification BDD');

const { data: linkInDb } = await window.supabase
  .from('shared_links')
  .select('*')
  .eq('id', courseLink.id)
  .single();

console.log('‚úÖ Lien dans BDD:', linkInDb);
console.log('   - Clics:', linkInDb.clicks);
console.log('   - Clics uniques:', linkInDb.unique_clicks);
console.log('   - Key:', linkInDb.key);
console.log('   - Domain:', linkInDb.domain); // Doit √™tre 'edge-function'

// ============================================================================
// TEST 4 : Simuler un clic (MANUEL)
// ============================================================================
console.log('\nüß™ Test 4 : Simuler un clic');
console.log('‚ö†Ô∏è  MANUEL : Ouvrir ce lien dans un nouvel onglet:');
console.log(courseLink.shortLink);
console.log('\nAttendre la redirection, puis revenir ici et continuer avec Test 5...');

// ============================================================================
// TEST 5 : V√©rifier tracking du clic
// ============================================================================
console.log('\nüß™ Test 5 : V√©rification tracking (apr√®s clic)');
console.log('‚è≥ Attendre 2-3 secondes apr√®s le clic...');

// Attendre 3 secondes
await new Promise(resolve => setTimeout(resolve, 3000));

// V√©rifier insertion dans link_clicks
const { data: clicks } = await window.supabase
  .from('link_clicks')
  .select('*')
  .eq('link_id', courseLink.id)
  .order('clicked_at', { ascending: false })
  .limit(1);

if (clicks && clicks.length > 0) {
  const lastClick = clicks[0];
  console.log('‚úÖ Clic enregistr√©:', lastClick);
  console.log('   - Date:', new Date(lastClick.clicked_at).toLocaleString('fr-FR'));
  console.log('   - IP:', lastClick.ip_address);
  console.log('   - Device:', lastClick.device_type);
  console.log('   - Browser:', lastClick.browser);
  console.log('   - OS:', lastClick.os);
  console.log('   - Pays:', lastClick.country);
  console.log('   - Ville:', lastClick.city);
  console.log('   - Unique:', lastClick.is_unique);
} else {
  console.log('‚ùå Aucun clic trouv√©. Avez-vous bien cliqu√© sur le lien ?');
}

// V√©rifier mise √† jour compteurs
const { data: updatedLink } = await window.supabase
  .from('shared_links')
  .select('clicks, unique_clicks')
  .eq('id', courseLink.id)
  .single();

console.log('‚úÖ Compteurs mis √† jour:', updatedLink);
console.log('   - Clics:', updatedLink.clicks);
console.log('   - Clics uniques:', updatedLink.unique_clicks);

// ============================================================================
// TEST 6 : R√©cup√©rer analytics
// ============================================================================
console.log('\nüß™ Test 6 : R√©cup√©ration analytics');

const analytics = await dubServiceTest.default.getCustomLinkAnalytics(
  courseLink.id,
  '30d'
);

console.log('‚úÖ Analytics r√©cup√©r√©es:', analytics);
console.log('   - Total clics:', analytics.clicks);
console.log('   - Clics uniques:', analytics.uniqueClicks);
console.log('   - Pays:', analytics.countries);
console.log('   - Devices:', analytics.devices);
console.log('   - Browsers:', analytics.browsers);
console.log('   - Referrers:', analytics.referrers);
console.log('   - Clics par jour:', analytics.clicksByDay);

// ============================================================================
// TEST 7 : Cr√©er lien parrainage
// ============================================================================
console.log('\nüß™ Test 7 : Cr√©ation lien parrainage');

const referralLink = await dubServiceTest.default.createReferralLink(user, {
  slug: `invite-test-${Date.now()}`
});

console.log('‚úÖ Lien parrainage cr√©√©:', referralLink);
console.log('üîó Short Link:', referralLink.shortLink);

// ============================================================================
// TEST 8 : Page Mes Liens
// ============================================================================
console.log('\nüß™ Test 8 : Page Mes Liens');
console.log('üìç Aller sur: http://localhost:5173/my-shared-links');
console.log('‚úÖ V√©rifier que les liens cr√©√©s apparaissent');
console.log('‚úÖ Cliquer sur "‚Üª Refresh Analytics"');
console.log('‚úÖ V√©rifier mise √† jour des compteurs');

// ============================================================================
// R√âSUM√â
// ============================================================================
console.log('\n' + '='.repeat(80));
console.log('üìä R√âSUM√â DES TESTS');
console.log('='.repeat(80));
console.log('‚úÖ Test 1 : Import service - OK');
console.log('‚úÖ Test 2 : Cr√©ation lien cours - OK');
console.log('‚úÖ Test 3 : V√©rification BDD - OK');
console.log('‚è≥ Test 4 : Simuler clic - MANUEL (√† faire)');
console.log('‚è≥ Test 5 : V√©rification tracking - APR√àS CLIC');
console.log('‚è≥ Test 6 : Analytics - APR√àS CLIC');
console.log('‚úÖ Test 7 : Lien parrainage - OK');
console.log('‚è≥ Test 8 : Page Mes Liens - MANUEL');
console.log('='.repeat(80));

// ============================================================================
// CLEANUP (optionnel)
// ============================================================================
console.log('\nüßπ Pour nettoyer les donn√©es de test:');
console.log(`
await window.supabase
  .from('shared_links')
  .delete()
  .eq('id', '${courseLink.id}');

await window.supabase
  .from('shared_links')
  .delete()
  .eq('id', '${referralLink.id}');
`);
