-- ============================================================================
-- CORRECTION D√âFINITIVE DU TRIGGER - Avec meilleur logging
-- Date: 10 octobre 2025
-- Probl√®me: Trigger √©choue silencieusement sans cr√©er user_points
-- ============================================================================

-- ============================================================================
-- √âTAPE 1: SUPPRIMER L'ANCIEN TRIGGER ET LA FONCTION
-- ============================================================================

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS handle_new_user() CASCADE;

-- ============================================================================
-- √âTAPE 2: CR√âER LA NOUVELLE FONCTION AVEC MEILLEUR LOGGING
-- ============================================================================

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    v_error_message text;
BEGIN
    -- Log du d√©but
    RAISE NOTICE 'Trigger handle_new_user: D√©but pour user %', NEW.id;

    -- Cr√©er le profil
    BEGIN
        -- Note: profiles n'a PAS de colonne email
        INSERT INTO public.profiles (id, full_name, created_at, updated_at)
        VALUES (
            NEW.id, 
            COALESCE(NEW.raw_user_meta_data->>'full_name', ''), 
            NOW(), 
            NOW()
        )
        ON CONFLICT (id) DO UPDATE 
        SET full_name = COALESCE(EXCLUDED.full_name, profiles.full_name),
            updated_at = NOW();
        
        RAISE NOTICE 'Trigger handle_new_user: Profil cr√©√©/mis √† jour pour %', NEW.id;
    EXCEPTION WHEN OTHERS THEN
        v_error_message := SQLERRM;
        RAISE WARNING 'Erreur cr√©ation profil pour %: %', NEW.id, v_error_message;
        -- Continue quand m√™me pour cr√©er les points
    END;

    -- Cr√©er les points (partie critique)
    BEGIN
        INSERT INTO public.user_points (
            user_id, 
            total_points, 
            level, 
            points_to_next_level, 
            current_streak, 
            longest_streak, 
            last_activity_date,
            quizzes_completed,
            lessons_completed,
            chapters_completed,
            courses_completed,
            total_time_spent
        )
        VALUES (
            NEW.id,       -- user_id
            0,            -- total_points
            1,            -- level
            100,          -- points_to_next_level
            0,            -- current_streak
            0,            -- longest_streak
            CURRENT_DATE, -- last_activity_date
            0,            -- quizzes_completed
            0,            -- lessons_completed
            0,            -- chapters_completed
            0,            -- courses_completed
            0             -- total_time_spent
        )
        ON CONFLICT (user_id) DO NOTHING;
        
        RAISE NOTICE 'Trigger handle_new_user: Points cr√©√©s pour %', NEW.id;
    EXCEPTION WHEN OTHERS THEN
        v_error_message := SQLERRM;
        RAISE WARNING '‚ùå ERREUR CRITIQUE cr√©ation points pour %: %', NEW.id, v_error_message;
        -- Ne pas bloquer l'inscription m√™me si √ßa √©choue
    END;

    RAISE NOTICE 'Trigger handle_new_user: Termin√© avec succ√®s pour %', NEW.id;
    RETURN NEW;

EXCEPTION WHEN OTHERS THEN
    v_error_message := SQLERRM;
    RAISE WARNING '‚ùå ERREUR G√âN√âRALE dans handle_new_user pour %: %', NEW.id, v_error_message;
    RETURN NEW; -- Ne jamais bloquer l'inscription
END;
$$;

-- ============================================================================
-- √âTAPE 3: RECR√âER LE TRIGGER
-- ============================================================================

CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();

-- ============================================================================
-- √âTAPE 4: V√âRIFICATION
-- ============================================================================

-- V√©rifier que le trigger est cr√©√©
SELECT 
    tgname as trigger_name,
    tgenabled as enabled,
    CASE tgenabled
        WHEN 'O' THEN '‚úÖ Activ√©'
        WHEN 'D' THEN '‚ùå D√©sactiv√©'
        ELSE '‚ö†Ô∏è Autre statut'
    END as status
FROM pg_trigger
WHERE tgname = 'on_auth_user_created';

-- V√©rifier que la fonction existe
SELECT 
    proname as function_name,
    prosecdef as security_definer,
    CASE prosecdef
        WHEN true THEN '‚úÖ SECURITY DEFINER'
        ELSE '‚ùå Pas SECURITY DEFINER'
    END as security_status
FROM pg_proc
WHERE proname = 'handle_new_user';

-- ============================================================================
-- √âTAPE 5: TEST AVEC UN UTILISATEUR EXISTANT (optionnel)
-- ============================================================================

-- Pour tester, vous pouvez simuler une mise √† jour sur un utilisateur existant
-- (Ne pas ex√©cuter cette partie en production)
/*
UPDATE auth.users 
SET updated_at = NOW() 
WHERE email = 'test@example.com';
*/

-- ============================================================================
-- MESSAGES DE SUCC√àS
-- ============================================================================

SELECT 'üéâ Trigger recr√©√© avec succ√®s!' as message;
SELECT '‚úÖ Meilleur logging activ√© (RAISE NOTICE + RAISE WARNING)' as amelioration;
SELECT '‚úÖ Tous les champs de user_points sont maintenant ins√©r√©s' as amelioration2;
SELECT 'üß™ Testez maintenant une nouvelle inscription' as prochaine_etape;

-- ============================================================================
-- NOTES IMPORTANTES
-- ============================================================================

-- ‚úÖ AM√âLIORATIONS APPORT√âES:
-- 1. Meilleur logging avec RAISE NOTICE √† chaque √©tape
-- 2. Tous les champs de user_points initialis√©s √† 0
-- 3. Blocs BEGIN/EXCEPTION s√©par√©s pour profil et points
-- 4. Messages d'erreur plus clairs avec ‚ùå
-- 5. SET search_path = public (s√©curit√©)

-- üîç COMMENT VOIR LES LOGS:
-- Dans Supabase Dashboard ‚Üí Logs ‚Üí Postgres Logs
-- Cherchez "Trigger handle_new_user" ou "ERREUR CRITIQUE"

-- ‚ö†Ô∏è SI LE TRIGGER NE FONCTIONNE TOUJOURS PAS:
-- 1. V√©rifier les logs Postgres dans Supabase
-- 2. V√©rifier que RLS est bien configur√© (politiques INSERT autoris√©es)
-- 3. V√©rifier que la contrainte unique sur user_id ne cause pas de conflit

-- üéØ APR√àS L'EX√âCUTION:
-- 1. Cr√©er un nouveau compte test en navigation priv√©e
-- 2. V√©rifier dans Supabase que user_points est cr√©√© automatiquement
-- 3. V√©rifier dans Logs ‚Üí Postgres que les RAISE NOTICE apparaissent
