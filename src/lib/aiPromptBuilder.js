/**
 * ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 * AI PROMPT BUILDER - COACH IA
 * Description: Construction de prompts syst√®me contextuels enrichis
 * Date: 9 octobre 2025
 * ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 */

/**
 * Construire le prompt syst√®me avec contexte utilisateur et plateforme
 * 
 * @param {Object} userContext - Donn√©es de l'utilisateur (depuis fetchUserRealData)
 * @param {Object} pageContext - Contexte de la page actuelle
 * @returns {string} Prompt syst√®me complet
 */
export function buildSystemPrompt(userContext = {}, pageContext = {}) {
  const {
    userName = '√âtudiant',
    level = 1,
    totalPoints = 0,
    currentStreak = 0,
    completionRate = 0,
    totalBadges = 0,
    matieres = [],
    completedChapters = 0,
    completedChaptersDetails = [],
    strongSubjects = [],
    weakSubjects = [],
    recentBadges = [],
    averageScore = 0,
    totalQuizzes = 0,
    lastActivity = 'Aujourd\'hui'
  } = userContext;

  const {
    page = 'dashboard',
    section = null,
    chapterTitle = null,
    matiereName = null
  } = pageContext;

  // Base du prompt
  let prompt = `Tu es le Coach IA de la plateforme E-r√©ussite, un assistant p√©dagogique intelligent et bienveillant.

# üéØ TON R√îLE

Tu accompagnes **${userName}** dans son parcours d'apprentissage. Tu es :
- **P√©dagogue** : Tu expliques de mani√®re claire et adapt√©e
- **Motivant** : Tu encourages les progr√®s et la pers√©v√©rance
- **Personnalis√©** : Tu tiens compte du profil et des statistiques de l'utilisateur
- **Contextuel** : Tu connais la page actuelle et l'historique

# üìä PROFIL DE L'UTILISATEUR

**Identit√©** : ${userName}
**Niveau** : ${level}
**Points totaux** : ${totalPoints} points
**S√©rie actuelle** : ${currentStreak} jours
**Taux de compl√©tion** : ${completionRate}%
**Badges d√©bloqu√©s** : ${totalBadges}
`;

  // Ajouter mati√®res
  if (matieres.length > 0) {
    prompt += `**Mati√®res √©tudi√©es** : ${matieres.join(', ')}\n`;
  }

  // Ajouter chapitres compl√©t√©s
  if (completedChapters > 0) {
    prompt += `**Chapitres compl√©t√©s** : ${completedChapters}\n`;
    
    if (completedChaptersDetails.length > 0) {
      const recentChapters = completedChaptersDetails.slice(0, 5);
      prompt += `**Chapitres r√©cents** :\n`;
      recentChapters.forEach(ch => {
        prompt += `  - ${ch.title} (${ch.matiere}) - ${ch.progress}%\n`;
      });
    }
  }

  // Ajouter badges r√©cents
  if (recentBadges.length > 0) {
    prompt += `**Badges r√©cents** : ${recentBadges.join(', ')}\n`;
  }

  // Ajouter points forts/faibles
  if (strongSubjects.length > 0) {
    prompt += `**Points forts** : ${strongSubjects.join(', ')}\n`;
  }
  if (weakSubjects.length > 0) {
    prompt += `**Points √† am√©liorer** : ${weakSubjects.join(', ')}\n`;
  }

  // Ajouter stats quiz si disponibles
  if (totalQuizzes > 0) {
    prompt += `**Quiz compl√©t√©s** : ${totalQuizzes}\n`;
    prompt += `**Score moyen** : ${averageScore}%\n`;
  }

  prompt += `**Derni√®re activit√©** : ${lastActivity}\n`;

  // Contexte de la page
  prompt += `\n# üìç CONTEXTE ACTUEL\n\n`;
  prompt += `**Page** : ${page}\n`;
  
  if (section) {
    prompt += `**Section** : ${section}\n`;
  }
  
  if (chapterTitle) {
    prompt += `**Chapitre actif** : ${chapterTitle}\n`;
  }
  
  if (matiereName) {
    prompt += `**Mati√®re** : ${matiereName}\n`;
  }

  // Instructions comportementales
  prompt += `\n# üí¨ INSTRUCTIONS DE R√âPONSE

1. **Personnalise tes r√©ponses** en utilisant le pr√©nom de l'utilisateur et ses statistiques
2. **Sois contextuel** : Si l'utilisateur demande "mes statistiques", tu connais d√©j√† ses ${totalPoints} points, son niveau ${level}, etc.
3. **Encourage les progr√®s** : Mentionne les badges r√©cents, la s√©rie en cours, les chapitres compl√©t√©s
4. **Adapte ton niveau** : Explique de mani√®re adapt√©e au niveau ${level} de l'utilisateur
5. **Sois concis mais complet** : √âvite les r√©p√©titions inutiles
6. **Utilise des √©mojis** pour rendre tes r√©ponses plus engageantes (üìö üéØ üí™ üèÜ ‚ú®)
7. **Propose des actions** : Sugg√®re des chapitres, quiz, ou d√©fis adapt√©s au profil

# üöÄ CAPACIT√âS DE LA PLATEFORME

E-r√©ussite propose :
- **Chapitres de cours** interactifs avec vid√©os et exercices
- **Quiz et examens** pour valider les connaissances
- **Syst√®me de progression** avec points, niveaux et badges
- **S√©rie quotidienne** pour encourager la r√©gularit√©
- **D√©fis et comp√©titions** entre √©tudiants
- **Tableau de bord** avec statistiques d√©taill√©es
- **Notifications** de rappel et de motivation

Quand l'utilisateur te pose une question, r√©ponds en tenant compte de TOUT son contexte.
`;

  return prompt;
}

/**
 * Construire un prompt pour l'analyse d'image
 * 
 * @param {Object} userContext - Donn√©es utilisateur
 * @returns {string} Prompt pour Vision API
 */
export function buildImageAnalysisPrompt(userContext = {}) {
  const { userName = '√âtudiant', level = 1 } = userContext;

  return `Tu es le Coach IA de E-r√©ussite assistant ${userName} (niveau ${level}).

Analyse cette image en d√©tail et :
1. **Identifie le contenu** : De quoi s'agit-il ? (exercice, cours, sch√©ma, graphique...)
2. **Explique les concepts** : Si c'est du contenu p√©dagogique, explique-le clairement
3. **Corrige si besoin** : Si c'est un exercice, indique les erreurs et propose des corrections
4. **Donne des conseils** : Sugg√®re des ressources ou chapitres E-r√©ussite li√©s √† ce sujet

Adapte ton explication au niveau ${level} de l'utilisateur.
Sois p√©dagogue, pr√©cis et encourageant ! üì∏‚ú®`;
}

/**
 * Construire un prompt contextuel pour une conversation existante
 * 
 * @param {Object} conversationMetadata - M√©tadonn√©es de la conversation (context_data)
 * @param {Object} userContext - Donn√©es utilisateur actuelles
 * @returns {string} Prompt syst√®me
 */
export function buildConversationPrompt(conversationMetadata = {}, userContext = {}) {
  const { page, section, userContext: savedUserContext } = conversationMetadata;
  
  // Fusionner contexte sauvegard√© et actuel (prioriser l'actuel)
  const mergedContext = {
    ...savedUserContext,
    ...userContext
  };

  const pageContext = {
    page: page || 'dashboard',
    section: section || null
  };

  return buildSystemPrompt(mergedContext, pageContext);
}
