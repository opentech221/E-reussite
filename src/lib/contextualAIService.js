import { GoogleGenerativeAI } from '@google/generative-ai';
import Anthropic from '@anthropic-ai/sdk';

/**
 * Service IA Contextuel avec multi-provider (Claude, Perplexity, Gemini)
 * Disponible partout dans l'application pour assistance en temps r√©el
 */
class ContextualAIService {
  constructor(apiKey) {
    // Initialiser Claude AI (prioritaire pour conseils p√©dagogiques)
    const claudeKey = import.meta.env.VITE_CLAUDE_API_KEY;
    if (claudeKey) {
      try {
        this.claude = new Anthropic({
          apiKey: claudeKey,
          dangerouslyAllowBrowser: true
        });
        console.log('‚úÖ [Contextual AI] Claude AI initialis√© (provider principal)');
      } catch (error) {
        console.error('‚ùå [Contextual AI] Erreur initialisation Claude:', error);
        this.claude = null;
      }
    } else {
      console.warn('‚ö†Ô∏è [Contextual AI] Cl√© API Claude manquante');
      this.claude = null;
    }

    // Initialiser Perplexity (optionnel pour recherche avec citations)
    const perplexityKey = import.meta.env.VITE_PERPLEXITY_API_KEY;
    if (perplexityKey) {
      this.perplexityKey = perplexityKey;
      this.perplexityBaseURL = '/api/perplexity-search'; // Edge Function
      console.log('‚úÖ [Contextual AI] Perplexity initialis√© (provider optionnel)');
    } else {
      console.warn('‚ö†Ô∏è [Contextual AI] Cl√© API Perplexity manquante');
      this.perplexityKey = null;
    }

    // Initialiser Gemini (fallback)
    if (!apiKey) {
      console.warn('‚ö†Ô∏è [Contextual AI] Cl√© API Gemini manquante');
      this.genAI = null;
    } else {
      try {
        this.genAI = new GoogleGenerativeAI(apiKey);
        this.model = this.genAI.getGenerativeModel({ 
          model: 'gemini-2.0-flash-exp',
          generationConfig: {
            temperature: 0.9,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          }
        });
        console.log('‚úÖ [Contextual AI] Gemini initialis√© (provider fallback)');
      } catch (error) {
        console.error('‚ùå [Contextual AI] Erreur initialisation Gemini:', error);
        this.genAI = null;
      }
    }

    this.chatSessions = new Map();
    this.conversationHistory = new Map();
    
    // ‚úÖ Cache des conseils pour √©conomiser le quota
    this.adviceCache = new Map();
    this.CACHE_DURATION = 60 * 60 * 1000; // 1 heure
  }

  /**
   * V√©rifie si le service est disponible
   */
  isAvailable() {
    return this.claude !== null || this.perplexityKey !== null || this.genAI !== null;
  }

  /**
   * Retourne le provider disponible en priorit√©
   * @param {string} preferredProvider - Provider pr√©f√©r√© ('claude', 'perplexity', 'gemini')
   */
  getAvailableProvider(preferredProvider = null) {
    // Si un provider pr√©f√©r√© est sp√©cifi√© et disponible
    if (preferredProvider === 'perplexity' && this.perplexityKey) return 'perplexity';
    if (preferredProvider === 'claude' && this.claude) return 'claude';
    if (preferredProvider === 'gemini' && this.genAI) return 'gemini';
    
    // Sinon, priorit√© par d√©faut
    if (this.claude) return 'claude';
    if (this.perplexityKey) return 'perplexity';
    if (this.genAI) return 'gemini';
    return null;
  }

  /**
   * Obtient ou cr√©e une session de chat pour un contexte donn√©
   */
  async getChatSession(contextId = 'default') {
    if (!this.isAvailable()) {
      throw new Error('Service IA non disponible');
    }

    if (!this.chatSessions.has(contextId)) {
      const chat = this.model.startChat({
        generationConfig: {
          temperature: 0.9,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        },
        history: this.conversationHistory.get(contextId) || [],
      });
      this.chatSessions.set(contextId, chat);
    }

    return this.chatSessions.get(contextId);
  }

  /**
   * Envoie un message avec contexte complet
   */
  async sendMessage(message, context = {}) {
    if (!this.isAvailable()) {
      return {
        success: false,
        error: 'Service IA non disponible',
        fallbackResponse: 'Le service d\'assistance IA n\'est pas disponible pour le moment.'
      };
    }

    try {
      const {
        page = 'unknown',
        section = 'general',
        userContext = {},
        additionalContext = '',
        conversationId = 'default'
      } = context;

      // Construire le prompt contextuel
      const contextualPrompt = this.buildContextualPrompt(
        message,
        page,
        section,
        userContext,
        additionalContext
      );

      console.log('ü§ñ [Contextual AI] Message:', { page, section, message: message.substring(0, 50) });

      // Obtenir la session de chat
      const chat = await this.getChatSession(conversationId);

      // Envoyer le message
      const result = await chat.sendMessage(contextualPrompt);
      const response = await result.response;
      const text = response.text();

      // Sauvegarder dans l'historique
      this.saveToHistory(conversationId, message, text);

      console.log('‚úÖ [Contextual AI] R√©ponse re√ßue:', text.substring(0, 100));

      return {
        success: true,
        response: text,
        context: { page, section }
      };
    } catch (error) {
      console.error('‚ùå [Contextual AI] Erreur:', error);
      return {
        success: false,
        error: error.message,
        fallbackResponse: 'D√©sol√©, je rencontre une difficult√©. Pourriez-vous reformuler votre question ?'
      };
    }
  }

  /**
   * Construit un prompt enrichi avec le contexte
   */
  buildContextualPrompt(message, page, section, userContext, additionalContext) {
    // Construction du contexte utilisateur enrichi
    const userStatsContext = this.buildUserStatsContext(userContext);
    const platformFeaturesContext = this.buildPlatformFeaturesContext(page);
    
    const systemContext = `Tu es un assistant IA intelligent int√©gr√© dans la plateforme √©ducative E-R√©ussite.

üìç CONTEXTE ACTUEL:
- Page: ${page}
- Section: ${section}
${userStatsContext}
${additionalContext ? `\nüìù CONTEXTE ADDITIONNEL:\n${additionalContext}` : ''}

üéØ TON R√îLE:
Tu es un assistant CONTEXTUEL et BAS√â SUR LES DONN√âES R√âELLES de la plateforme E-R√©ussite.

‚ö†Ô∏è R√àGLES STRICTES POUR TES R√âPONSES:

1. **TOUJOURS utiliser les donn√©es r√©elles de l'utilisateur** (statistiques, progression, badges, etc.)
2. **TOUJOURS sugg√©rer des fonctionnalit√©s EXISTANTES** de la plateforme
3. **SI l'utilisateur demande "liste les modules" ou "fonctionnalit√©s disponibles"**, tu DOIS utiliser la liste compl√®te fournie dans ${platformFeaturesContext}
4. **SI une fonctionnalit√© n'existe PAS**, le dire clairement avec cette phrase EXACTE:
   "üì¢ Cette fonctionnalit√© n'existe pas encore sur E-R√©ussite, mais c'est une excellente suggestion ! Nous prenons note pour am√©liorer la plateforme. üí°"

5. **NE JAMAIS inventer** des fonctionnalit√©s inexistantes
6. **NE JAMAIS donner des conseils g√©n√©riques** sans r√©f√©rence √† la plateforme
7. **QUAND l'utilisateur demande la liste des modules**: Utilise OBLIGATOIREMENT le contexte ${platformFeaturesContext} fourni ci-dessous, n'invente RIEN

${platformFeaturesContext}

üìö EXEMPLES DE BONNES R√âPONSES:

‚ùå MAUVAIS (g√©n√©rique):
"Regarde ton Dashboard pour voir tes statistiques"

‚úÖ BON (avec donn√©es r√©elles):
"D'apr√®s ton Dashboard, tu as ${userContext.totalPoints || 0} points et un streak de ${userContext.currentStreak || 0} jours. Je vois que ton taux de compl√©tion est de ${userContext.completionRate || 0}%. Concentre-toi sur les ${userContext.weakSubjects?.join(', ') || 'mati√®res o√π tu as le moins de points'}."

‚ùå MAUVAIS (fonctionnalit√© inexistante):
"Utilise la fonctionnalit√© de r√©vision automatique"

‚úÖ BON (honn√™te):
"üì¢ Cette fonctionnalit√© n'existe pas encore sur E-R√©ussite, mais c'est une excellente suggestion ! Nous prenons note pour am√©liorer la plateforme. üí°"

üìö CAPACIT√âS ET MODULES DISPONIBLES:

**üìä Tableau de bord (Dashboard):**
- Statistiques en temps r√©el, graphiques de progression, actions prioritaires, badges

**üìö Contenu p√©dagogique:**
- Cours (Maths, Fran√ßais, SVT, Physique, Anglais, Histoire-G√©o)
- Quiz par chapitre, Examens blancs BFEM/BAC

**üèÜ Gamification:**
- Syst√®me de points et niveaux, 14 badges, s√©rie quotidienne, d√©fis, leaderboard

**üìà Suivi et statistiques:**
- Page Progression, Analytiques avanc√©es (/analytics), Historique activit√©s (/historique)

**üéì Orientation Professionnelle (/orientation):**
- Test d'orientation (17 questions)
- 30 m√©tiers d√©taill√©s avec scores de compatibilit√©
- R√©sultats int√©gr√©s dans le profil
- Bouton "D√©couvrir ce m√©tier" avec modal d√©taill√©e

**üìÖ Plan d'√âtude (/study-plan):**
- Planification personnalis√©e avec t√¢ches et √©ch√©ances
- Suivi des objectifs quotidiens/hebdomadaires
- Notifications pour t√¢ches

**üë§ Profil (/profile):**
- Stats compl√®tes, badges, orientation professionnelle, abonnement
- Section contexte socio-√©conomique

**üåê Social & Partage:**
- R√©seau social (/social): amis, suiveurs, publications
- Mes liens partag√©s (/my-shared-links): stats clics avec Dub.co

**üí¨ Coach IA (moi!):**
- 3 onglets: Conversations, Analyses & Conseils, Recherche Perplexity
- Multi-provider: Gemini, Claude, Perplexity
- Analyse d'images, contexte complet en temps r√©el

**‚öôÔ∏è Autres:**
- Param√®tres (/settings): notifications, dark mode
- Boutique (/shop) et Panier (/cart)
- FAQ (/faq) et Support (/help)
- Abonnement (/payment): 7 jours gratuit + 1000 FCFA √† vie (Mobile Money)

‚ö†Ô∏è **IMPORTANT:** Quand l'utilisateur demande "liste les modules", tu DOIS mentionner TOUTES ces fonctionnalit√©s, pas seulement les anciennes !

üó£Ô∏è TON STYLE:
- Amical et encourageant
- Pr√©cis et √©ducatif
- Adapt√© au niveau de l'√©tudiant
- Emojis appropri√©s (mais mod√©r√©s)
- R√©ponses structur√©es et claires

‚ö†Ô∏è R√àGLES:
- R√©ponds TOUJOURS en fran√ßais
- Sois concis (max 250 mots par d√©faut)
- Si question complexe, propose d'approfondir
- Si hors contexte, redirige poliment
- Reste dans le cadre √©ducatif

üë§ QUESTION DE L'√âTUDIANT:
${message}

üí¨ TA R√âPONSE (contextuelle et personnalis√©e):`;

    return systemContext;
  }

  /**
   * Construit le contexte des statistiques utilisateur
   * üî• MISE √Ä JOUR: Utilise les donn√©es compl√®tes depuis realtimeDataService
   */
  buildUserStatsContext(userContext) {
    if (!userContext || Object.keys(userContext).length === 0) {
      return '- Aucune donn√©e utilisateur disponible';
    }

    // üî• NOUVEAU: Si contextSummary existe, l'utiliser directement
    if (userContext.contextSummary) {
      return `\nüë§ DONN√âES R√âELLES DE L'UTILISATEUR (EN TEMPS R√âEL):\n\n${userContext.contextSummary}`;
    }

    // Sinon, utiliser l'ancien format (pour compatibilit√©)
    let context = '\nüë§ DONN√âES R√âELLES DE L\'UTILISATEUR:\n';
    
    if (userContext.userName) context += `- Nom: ${userContext.userName}\n`;
    if (userContext.level) context += `- Niveau: ${userContext.level}\n`;
    if (userContext.totalPoints !== undefined) context += `- Points totaux: ${userContext.totalPoints}\n`;
    if (userContext.currentStreak !== undefined) context += `- Streak actuel: ${userContext.currentStreak} jours\n`;
    if (userContext.maxStreak !== undefined) context += `- Meilleur streak: ${userContext.maxStreak} jours\n`;
    if (userContext.completionRate !== undefined) context += `- Taux de compl√©tion: ${userContext.completionRate}%\n`;
    if (userContext.totalBadges !== undefined) context += `- Badges d√©bloqu√©s: ${userContext.totalBadges}\n`;
    if (userContext.rank !== undefined) context += `- Classement: ${userContext.rank}\n`;
    
    // ‚úÖ Mati√®res avec NOMS R√âELS (pas des IDs)
    if (userContext.matieres && userContext.matieres.length > 0) {
      context += `- Mati√®res √©tudi√©es: ${userContext.matieres.join(', ')}\n`;
    }
    if (userContext.weakSubjects && userContext.weakSubjects.length > 0) {
      context += `- Mati√®res √† am√©liorer: ${userContext.weakSubjects.join(', ')}\n`;
    }
    if (userContext.strongSubjects && userContext.strongSubjects.length > 0) {
      context += `- Points forts: ${userContext.strongSubjects.join(', ')}\n`;
    }
    
    // ‚úÖ Badges avec NOMS R√âELS et descriptions
    if (userContext.badgesDetails && userContext.badgesDetails.length > 0) {
      context += `\nüèÜ BADGES D√âBLOQU√âS (avec d√©tails):\n`;
      userContext.badgesDetails.slice(0, 5).forEach(badge => {
        const badgeName = badge.badge_name || badge.name;
        const badgeDesc = badge.badge_description || badge.description || 'Badge de r√©ussite';
        context += `  - ${badgeName}: ${badgeDesc}\n`;
      });
      if (userContext.badgesDetails.length > 5) {
        context += `  ... et ${userContext.badgesDetails.length - 5} autres badges\n`;
      }
    } else if (userContext.recentBadges && userContext.recentBadges.length > 0) {
      context += `- Badges r√©cents: ${userContext.recentBadges.join(', ')}\n`;
    }
    
    // ‚úÖ Chapitres compl√©t√©s avec TITRES R√âELS
    if (userContext.completedChaptersDetails && userContext.completedChaptersDetails.length > 0) {
      context += `\nüìö CHAPITRES COMPL√âT√âS (avec titres):\n`;
      const chaptersToShow = userContext.completedChaptersDetails.slice(0, 8);
      chaptersToShow.forEach(chapter => {
        context += `  - ${chapter.title} (${chapter.matiere}) - ${chapter.progress}% compl√©t√©\n`;
      });
      if (userContext.completedChaptersDetails.length > 8) {
        context += `  ... et ${userContext.completedChaptersDetails.length - 8} autres chapitres\n`;
      }
    } else if (userContext.completedChapters !== undefined) {
      context += `- Chapitres compl√©t√©s: ${userContext.completedChapters}\n`;
    }
    
    // ‚úÖ NOUVEAU: Orientation professionnelle
    if (userContext.completeData?.orientation?.hasCompletedTest) {
      const orientation = userContext.completeData.orientation;
      context += `\nüéì ORIENTATION PROFESSIONNELLE:\n`;
      context += `- Test compl√©t√©: Oui (${new Date(orientation.testDate).toLocaleDateString('fr-FR')})\n`;
      if (orientation.topCareer) {
        context += `- M√©tier principal: ${orientation.topCareer.title} (${orientation.topCareer.compatibility_score}% de compatibilit√©)\n`;
      }
      if (orientation.topCareers.length > 1) {
        const otherCareers = orientation.topCareers.slice(1, 3).map(c => c.title).join(', ');
        context += `- Autres m√©tiers compatibles: ${otherCareers}\n`;
      }
    }
    
    // ‚úÖ NOUVEAU: Plan d'√©tude
    if (userContext.completeData?.studyPlan?.hasActivePlan) {
      const studyPlan = userContext.completeData.studyPlan;
      context += `\nüìÖ PLAN D'√âTUDE:\n`;
      context += `- T√¢ches totales: ${studyPlan.totalTasks}\n`;
      context += `- T√¢ches compl√©t√©es: ${studyPlan.completedTasks}\n`;
      context += `- T√¢ches pour aujourd'hui: ${studyPlan.todayTasks}\n`;
      if (studyPlan.overdueTasks > 0) {
        context += `- ‚ö†Ô∏è T√¢ches en retard: ${studyPlan.overdueTasks}\n`;
      }
    }
    
    // ‚úÖ NOUVEAU: Abonnement
    if (userContext.completeData?.subscription) {
      const sub = userContext.completeData.subscription;
      context += `\nüí≥ ABONNEMENT:\n`;
      context += `- Statut: ${sub.status === 'active' ? 'Actif' : sub.status === 'trial' ? 'Essai gratuit' : 'Aucun'}\n`;
      if (sub.isActive || sub.isTrial) {
        context += `- Jours restants: ${sub.daysRemaining}\n`;
      }
    }

    return context;
  }

  /**
   * üî• Construit le contexte des fonctionnalit√©s disponibles sur la plateforme
   * MISE √Ä JOUR COMPL√àTE: Inclut TOUTES les fonctionnalit√©s avec acc√®s aux donn√©es r√©elles
   */
  buildPlatformFeaturesContext(page) {
    const allFeatures = {
      // üìä Dashboard - Tableau de bord principal
      dashboard: [
        'Statistiques en temps r√©el (points, streak, badges, niveau)',
        'Graphiques de progression (7 derniers jours)',
        'Section "Prochaines actions prioritaires"',
        'Badges r√©cents et √† d√©bloquer',
        'Acc√®s rapide aux mati√®res (Math√©matiques, Physique, Fran√ßais, SVT, Anglais, etc.)',
        'Liens vers Quiz, Examens, Challenges, Plan d\'√©tude',
        'Taux de compl√©tion global des chapitres'
      ],
      
      // üìö Cours et chapitres
      courses: [
        'Chapitres par mati√®re (Math√©matiques, Physique, Fran√ßais, SVT, Anglais, Histoire-G√©o, etc.)',
        'Contenu de cours d√©taill√© avec vid√©os et exercices',
        'Quiz de validation apr√®s chaque chapitre',
        'Progression par chapitre (pourcentage)',
        'Difficult√© et dur√©e estim√©e pour chaque chapitre',
        'Badges √† d√©bloquer en compl√©tant',
        'Temps pass√© sur chaque chapitre (statistiques)',
        'Navigation par mati√®re et niveau (BFEM/BAC)'
      ],
      
      // ‚ùì Quiz et r√©visions
      quiz: [
        'Quiz par chapitre et mati√®re',
        'Questions √† choix multiples avec correction',
        'R√©sultats instantan√©s avec score',
        'Correction d√©taill√©e avec explications',
        'Points gagn√©s/perdus selon performance',
        'Historique des tentatives avec possibilit√© de recommencer',
        'Page de r√©vision (/quiz-review) pour revoir les erreurs'
      ],
      
      // üìù Examens blancs
      exams: [
        'Examens blancs BFEM et BAC disponibles',
        'Simulation conditions r√©elles d\'examen',
        'Correction compl√®te avec justifications',
        'Statistiques de r√©ussite par mati√®re',
        'Classement des r√©sultats',
        'Page r√©sultats (/exam-results) avec historique complet'
      ],
      
      // üìà Progression et statistiques
      progression: [
        'Graphiques d\'√©volution sur 30 jours',
        'Statistiques d√©taill√©es par mati√®re',
        'Tableau de bord analytique avec forces/faiblesses',
        'Historique complet d\'activit√©s',
        'Identification automatique des mati√®res √† renforcer',
        'Temps total d\'√©tude par mati√®re'
      ],
      
      // üèÜ Badges et r√©compenses
      badges: [
        'Collection de 14 badges disponibles : Premier Pas, Apprenant Assidu, Ma√Ætre des Quiz, Champion, S√©rie 7/30/100 jours, Premier A, Perfectionniste, Expert, etc.',
        'Crit√®res de d√©blocage clairs pour chaque badge',
        'Progression vers chaque badge (visible)',
        'Badges rares et exclusifs',
        'Points bonus pour badges d√©bloqu√©s',
        'Affichage dans le profil et sur le leaderboard'
      ],
      
      // üéØ D√©fis et challenges
      challenges: [
        'D√©fis quotidiens/hebdomadaires',
        'Challenges par mati√®re',
        'R√©compenses en points',
        'Classement des challengers',
        'Badges sp√©ciaux pour d√©fis compl√©t√©s'
      ],
      
      // ü•á Classement (Leaderboard)
      leaderboard: [
        'Classement g√©n√©ral (Top 100)',
        'Classement par niveau scolaire',
        'Classement par mati√®re',
        'Classement hebdomadaire',
        'Votre position actuelle en temps r√©el',
        'Points des concurrents',
        'Badges visibles des top performers'
      ],
      
      // üë§ Profil utilisateur
      profile: [
        'Statistiques personnelles compl√®tes (points, niveau, streak, badges)',
        'Section Orientation Professionnelle (r√©sultats du test avec top 3 m√©tiers)',
        'Bouton "D√©couvrir ce m√©tier" pour voir d√©tails dans une modale',
        'Graphique de progression sur 30 jours',
        'Badges obtenus avec collection compl√®te',
        'Section Abonnement avec statut (actif/trial/expir√©)',
        'Bouton "G√©rer mon abonnement" pour acc√©der au paiement',
        'Contexte socio-√©conomique (situation financi√®re, r√©seau de soutien, valeurs religieuses, niveau acad√©mique)',
        'Bouton "Modifier le profil" pour √©diter les informations',
        'Timeline d\'activit√©s r√©centes'
      ],
      
      // üìú Historique d'activit√©s
      historique: [
        'Vue compl√®te de TOUTES les activit√©s (chapitres, quiz, examens, badges)',
        'Statistiques par type d\'activit√© (Total, Chapitres, Quiz, Examens)',
        'Barre de recherche pour filtrer les activit√©s',
        'Filtres par type : Tout, Chapitres, Quiz, Examens, Badges',
        'Cartes d√©taill√©es avec score, temps pass√©, date',
        'Bouton "Conseils IA" sur chaque activit√© pour analyse personnalis√©e',
        'Modal avec points forts, points faibles et suggestions',
        'Bouton "Recommencer" pour refaire n\'importe quelle activit√©',
        'Ordre chronologique (plus r√©centes en premier)',
        'Code couleur des scores (vert ‚â•70%, jaune 50-69%, rouge <50%)'
      ],
      activity_history: [ // Alias
        'Vue compl√®te de TOUTES les activit√©s (chapitres, quiz, examens, badges)',
        'Statistiques par type d\'activit√©',
        'Filtres et recherche avanc√©e',
        'Analyse IA pour chaque activit√©',
        'Boutons d\'action (Recommencer, Conseils)'
      ],
      
      // üéì Orientation Professionnelle
      orientation: [
        'Test d\'orientation professionnelle complet (17 questions)',
        '30 m√©tiers d√©taill√©s avec descriptions compl√®tes',
        'Score de compatibilit√© personnalis√© pour chaque m√©tier',
        'Pr√©-remplissage automatique des questions depuis le profil (Q13-Q17)',
        'Int√©gration avec le profil (r√©sultats sauvegard√©s automatiquement)',
        'Affichage des top 3 m√©tiers dans le profil',
        'Modal d√©taill√©e pour chaque m√©tier avec formation requise, salaire, d√©bouch√©s',
        'Bouton "D√©couvrir ce m√©tier" dans le profil'
      ],
      
      // üìÖ Plan d'√©tude
      'study-plan': [
        'Planification personnalis√©e des r√©visions',
        'Cr√©ation de t√¢ches d\'√©tude avec √©ch√©ances',
        'Suivi des objectifs quotidiens/hebdomadaires',
        'Notifications pour t√¢ches √† venir',
        'Statistiques de compl√©tion',
        'Suggestions de t√¢ches bas√©es sur les mati√®res faibles',
        'Calendrier visuel des r√©visions'
      ],
      studyplan: [ // Alias
        'Planification des r√©visions',
        'T√¢ches avec √©ch√©ances',
        'Suivi des objectifs',
        'Statistiques de compl√©tion'
      ],
      
      // üìä Analytiques avanc√©es
      analytics: [
        'Tableaux de bord d√©taill√©s par mati√®re',
        'Graphiques de progression avanc√©s',
        'Analyse des forces et faiblesses (donn√©es r√©elles)',
        'Tendance d\'√©volution (croissance/stable/d√©clin)',
        'Temps d\'√©tude par mati√®re (statistiques compl√®tes)',
        'Activit√© des 7 derniers jours',
        'Recommandations bas√©es sur les donn√©es'
      ],
      
      // üåê R√©seau Social
      social: [
        'Partage d\'activit√©s avec d\'autres √©tudiants',
        'Syst√®me d\'amis et de suiveurs',
        'Publications et interactions sociales',
        'Likes et commentaires',
        'Fil d\'actualit√© des amis',
        'Profils publics des √©tudiants'
      ],
      
      // üîó Mes Liens Partag√©s
      'my-shared-links': [
        'Gestion de vos liens de partage',
        'G√©n√©ration de liens personnalis√©s (avec Dub.co)',
        'Statistiques de clics sur vos liens',
        'Conversions et tracking',
        'Liens actifs/inactifs',
        'QR codes pour vos liens'
      ],
      mysharedlinks: [ // Alias
        'Gestion des liens partag√©s',
        'Statistiques de clics',
        'Conversions tracking'
      ],
      
      // ‚öôÔ∏è Param√®tres
      settings: [
        'Configuration du compte',
        'Pr√©f√©rences de notification',
        'Choix du mode sombre/clair',
        'Gestion de la confidentialit√©',
        'Param√®tres de langue',
        'Notifications push (activation/d√©sactivation)'
      ],
      
      // üí¨ Coach IA (cette page actuelle!)
      'coach-ia': [
        'Conversation intelligente avec acc√®s √† TOUTES vos donn√©es en temps r√©el',
        '3 onglets : Conversations, Analyses & Conseils, Recherche Perplexity',
        '4 fournisseurs IA : Gemini 1.5 Flash (gratuit), Gemini Pro, Claude 3.5 Sonnet, Perplexity',
        'Analyse d\'images avec Vision API (pour aider avec photos d\'exercices)',
        'Historique des conversations sauvegard√©',
        'Conseils personnalis√©s bas√©s sur vos forces/faiblesses',
        'Plan d\'√©tude g√©n√©r√© automatiquement',
        'Recherche web √©ducative en temps r√©el (Perplexity)',
        'Contexte complet : profil, progression, orientation, badges, plan d\'√©tude, etc.'
      ],
      coachia: [ // Alias
        'Assistant IA avec acc√®s complet aux donn√©es',
        'Multi-provider (Gemini, Claude, Perplexity)',
        'Analyse d\'images',
        'Recherche web √©ducative'
      ],
      
      // ü§ñ Chatbot (page s√©par√©e)
      chatbot: [
        'Assistant conversationnel simple',
        'R√©ponses rapides aux questions courantes',
        'Aide √† la navigation',
        'Suggestions de contenu'
      ],
      
      // üí≥ Paiement et abonnement
      payment: [
        'Essai gratuit de 7 jours pour nouveaux inscrits',
        'Abonnement unique : 1000 FCFA pour acc√®s ILLIMIT√â √† vie',
        'Paiement Mobile Money : Orange Money, Wave, Free Money, MTN Money',
        'Historique des transactions',
        'Gestion de l\'abonnement (annulation, renouvellement)',
        'Statut visible : Trial (essai), Active (actif), Expired (expir√©)'
      ],
      
      // üõí Boutique (Shop)
      shop: [
        'Produits √©ducatifs disponibles',
        'Livres et ressources p√©dagogiques',
        'Accessoires d\'√©tude',
        'Ajout au panier',
        'Paiement s√©curis√©'
      ],
      
      // üõí Panier (Cart)
      cart: [
        'Gestion du panier d\'achat',
        'Modification des quantit√©s',
        'Calcul du total',
        'Passage √† la commande',
        'Sauvegarde du panier'
      ],
      
      // ‚ùì FAQ et Support
      faq: [
        'Questions fr√©quemment pos√©es',
        'R√©ponses d√©taill√©es par cat√©gorie',
        'Guide d\'utilisation',
        'R√©solution de probl√®mes courants'
      ],
      help: [
        'Centre d\'aide complet',
        'Tutoriels vid√©o',
        'Guides pas √† pas',
        'Contact support',
        'Formulaire de feedback'
      ]
    };

    const pageKey = page.toLowerCase().replace(/[-\s]/g, ''); // Normaliser les cl√©s
    let features = allFeatures[pageKey] || allFeatures[page.toLowerCase()] || [];
    
    if (features.length === 0) {
      // Retourner un aper√ßu g√©n√©ral de toutes les fonctionnalit√©s
      return `\nüîß MODULES DISPONIBLES SUR E-R√âUSSITE:

üìä **Contenu p√©dagogique**: Cours, Chapitres, Quiz, Examens blancs
üèÜ **Gamification**: Points, Niveaux, Badges (14 badges), D√©fis, S√©rie quotidienne
üìà **Suivi**: Dashboard, Progression, Analytiques avanc√©es, Historique d'activit√©s
üéì **Orientation**: Test professionnel (30 m√©tiers), R√©sultats dans le profil
üìÖ **Organisation**: Plan d'√©tude personnalis√© avec t√¢ches et √©ch√©ances
üë§ **Profil**: Stats compl√®tes, Badges, Orientation, Abonnement
ü•á **Comp√©tition**: Leaderboard (global, par niveau, par mati√®re, hebdomadaire)
üí¨ **IA**: Coach IA (moi!), Chatbot, Analyse d'images, Recherche Perplexity
üåê **Social**: Amis, Suiveurs, Publications, Interactions
üîó **Partage**: Liens personnalis√©s avec statistiques (Dub.co)
‚öôÔ∏è **Param√®tres**: Notifications, Dark mode, Confidentialit√©
üí≥ **Abonnement**: Essai gratuit 7 jours, puis 1000 FCFA √† vie (Mobile Money)
üõí **Boutique**: Produits √©ducatifs, Panier, Paiement s√©curis√©
‚ùì **Support**: FAQ, Centre d'aide, Tutoriels, Contact

‚ö†Ô∏è IMPORTANT: Sugg√®re UNIQUEMENT ces fonctionnalit√©s existantes. Si l'√©tudiant demande autre chose, signale honn√™tement que √ßa n'existe pas encore.`;
    }

    let context = `\nüîß FONCTIONNALIT√âS DISPONIBLES SUR "${page}":\n`;
    features.forEach(feature => {
      context += `  ‚úÖ ${feature}\n`;
    });

    context += '\n‚ö†Ô∏è IMPORTANT: Sugg√®re UNIQUEMENT ces fonctionnalit√©s existantes. Si l\'√©tudiant demande autre chose, signale honn√™tement que √ßa n\'existe pas encore.\n';

    return context;
  }

  /**
   * Sauvegarde dans l'historique de conversation
   */
  saveToHistory(conversationId, userMessage, aiResponse) {
    if (!this.conversationHistory.has(conversationId)) {
      this.conversationHistory.set(conversationId, []);
    }

    const history = this.conversationHistory.get(conversationId);
    history.push({
      role: 'user',
      parts: [{ text: userMessage }]
    });
    history.push({
      role: 'model',
      parts: [{ text: aiResponse }]
    });

    // Limiter l'historique (garder 20 derniers messages)
    if (history.length > 40) {
      history.splice(0, 20);
    }
  }

  /**
   * Obtient l'historique d'une conversation
   */
  getHistory(conversationId = 'default') {
    return this.conversationHistory.get(conversationId) || [];
  }

  /**
   * Efface l'historique d'une conversation
   */
  clearHistory(conversationId = 'default') {
    this.conversationHistory.delete(conversationId);
    this.chatSessions.delete(conversationId);
    console.log(`üóëÔ∏è [Contextual AI] Historique "${conversationId}" effac√©`);
  }

  /**
   * Efface tous les historiques
   */
  clearAllHistories() {
    this.conversationHistory.clear();
    this.chatSessions.clear();
    console.log('üóëÔ∏è [Contextual AI] Tous les historiques effac√©s');
  }

  /**
   * Explique un √©l√©ment sp√©cifique (concept, statistique, etc.)
   */
  async explainElement(elementType, elementData, context = {}) {
    const explanationPrompts = {
      statistic: `Explique cette statistique √† l'√©tudiant : ${JSON.stringify(elementData)}`,
      concept: `Explique ce concept de mani√®re simple : ${elementData}`,
      error: `L'√©tudiant a fait cette erreur : ${elementData}. Explique pourquoi et comment l'√©viter.`,
      badge: `Explique comment obtenir ce badge : ${JSON.stringify(elementData)}`,
      prediction: `Explique cette pr√©diction : ${JSON.stringify(elementData)}`,
      recommendation: `Explique cette recommandation : ${elementData}`
    };

    const prompt = explanationPrompts[elementType] || `Explique ceci : ${elementData}`;
    return await this.sendMessage(prompt, context);
  }

  /**
   * Sugg√®re une action bas√©e sur le contexte
   */
  async suggestAction(currentContext, userGoal = '') {
    const prompt = `
Contexte actuel : ${JSON.stringify(currentContext)}
${userGoal ? `Objectif de l'√©tudiant : ${userGoal}` : ''}

Sugg√®re la meilleure action √† prendre maintenant (1 seule action concr√®te et pr√©cise).
`;
    return await this.sendMessage(prompt, { 
      page: currentContext.page,
      section: 'action-suggestion'
    });
  }

  /**
   * Analyse rapide d'une situation
   */
  async quickAnalysis(data, analysisType = 'performance') {
    const analysisPrompts = {
      performance: `Analyse rapide de cette performance en 3 points cl√©s : ${JSON.stringify(data)}`,
      progress: `Analyse cette progression en 3 points : ${JSON.stringify(data)}`,
      exam: `Analyse ce r√©sultat d'examen en 3 points : ${JSON.stringify(data)}`,
      habit: `Analyse ces habitudes d'√©tude en 3 points : ${JSON.stringify(data)}`
    };

    const prompt = analysisPrompts[analysisType] || `Analyse ceci : ${JSON.stringify(data)}`;
    return await this.sendMessage(prompt, { section: 'quick-analysis' });
  }

  /**
   * G√©n√®re un r√©sum√© contextuel
   */
  async generateSummary(content, maxLength = 100) {
    const prompt = `R√©sume ceci en ${maxLength} mots maximum, de mani√®re claire et utile pour un √©tudiant : ${content}`;
    return await this.sendMessage(prompt, { section: 'summary' });
  }

  /**
   * R√©pond √† une question FAQ contextuelle
   */
  async answerFAQ(question, context = {}) {
    const prompt = `Question FAQ : ${question}\n\nR√©ponds de mani√®re claire et compl√®te.`;
    return await this.sendMessage(prompt, { ...context, section: 'faq' });
  }

  /**
   * Donne un conseil motivationnel personnalis√©
   */
  async getMotivation(userContext = {}) {
    const prompt = `Donne un message motivant et personnalis√© √† cet √©tudiant (2-3 phrases max).`;
    return await this.sendMessage(prompt, { 
      userContext,
      section: 'motivation'
    });
  }

  /**
   * G√©n√®re des exercices de pratique
   */
  async generatePracticeExercises(topic, difficulty = 'moyen', count = 3) {
    const prompt = `
G√©n√®re ${count} exercices de pratique sur : ${topic}
Difficult√© : ${difficulty}
Format : Question + Indice + R√©ponse courte

Pr√©sente-les de mani√®re claire et num√©rot√©e.
`;
    return await this.sendMessage(prompt, { section: 'practice' });
  }

  /**
   * Explique une erreur d'examen/quiz
   */
  async explainMistake(question, userAnswer, correctAnswer, explanation = '') {
    const prompt = `
Question : ${question}
R√©ponse de l'√©tudiant : ${userAnswer}
Bonne r√©ponse : ${correctAnswer}
${explanation ? `Explication fournie : ${explanation}` : ''}

Explique l'erreur de mani√®re p√©dagogique et donne un conseil pour ne plus la refaire.
`;
    return await this.sendMessage(prompt, { section: 'mistake-explanation' });
  }

  /**
   * Cr√©e un plan de r√©vision express
   */
  async createQuickRevisionPlan(topic, timeAvailable, currentLevel = 'moyen') {
    const prompt = `
Sujet √† r√©viser : ${topic}
Temps disponible : ${timeAvailable}
Niveau actuel : ${currentLevel}

Cr√©e un plan de r√©vision express, √©tape par √©tape, optimis√© pour ce temps.
`;
    return await this.sendMessage(prompt, { section: 'revision-plan' });
  }

  /**
   * Traduit du jargon technique en langage simple
   */
  async simplifyJargon(technicalText) {
    const prompt = `Explique ce texte technique en langage simple pour un √©tudiant : ${technicalText}`;
    return await this.sendMessage(prompt, { section: 'simplification' });
  }

  /**
   * G√©n√®re des conseils personnalis√©s pour une activit√© compl√©t√©e
   * Supporte multi-provider: Claude (priorit√©), Perplexity (optionnel), Gemini (fallback)
   * 
   * @param {Object} activity - Activit√© compl√©t√©e
   * @param {Object} userProfile - Profil utilisateur
   * @param {Array} relatedChapters - Chapitres li√©s
   * @param {string} preferredProvider - Provider pr√©f√©r√© ('claude', 'perplexity', 'gemini')
   * @returns {Promise<Object>}
   */
  async generateAdviceForActivity(activity, userProfile, relatedChapters = [], preferredProvider = null) {
    if (!this.isAvailable()) {
      return {
        error: true,
        message: 'Service IA non disponible'
      };
    }

    try {
      // ‚úÖ CACHE: V√©rifier si les conseils existent d√©j√†
      const cacheKey = `${activity.type}_${activity.id}_${activity.score || 0}`;
      const cachedAdvice = this.adviceCache.get(cacheKey);
      
      if (cachedAdvice && (Date.now() - cachedAdvice.timestamp < this.CACHE_DURATION)) {
        console.log('üì¶ [Cache] Conseils r√©cup√©r√©s du cache:', cacheKey);
        return cachedAdvice.advice;
      }
      
      const activityType = activity.type;
      const score = activity.score || 0;
      const timeSpent = activity.timeSpent || 0;
      const correctAnswers = activity.correctAnswers || 0;
      const totalQuestions = activity.totalQuestions || 0;

      let prompt = `Tu es un coach p√©dagogique expert pour des √©tudiants s√©n√©galais pr√©parant le BFEM et le BAC.

Analyse cette activit√© compl√©t√©e et fournis des conseils personnalis√©s :

**Type d'activit√©** : ${this.getActivityTypeLabel(activityType)}
**Titre** : ${activity.title}
**Mati√®re** : ${activity.subject}
`;

      // Ajouter les d√©tails selon le type
      if (activityType === 'quiz_completed' || activityType === 'exam_completed') {
        prompt += `**Score obtenu** : ${score}%
**Questions r√©ussies** : ${correctAnswers}/${totalQuestions}
**Temps pass√©** : ${Math.round(timeSpent / 60)} minutes

`;
      } else if (activityType === 'chapter_completed') {
        prompt += `**Temps pass√©** : ${Math.round(timeSpent / 60)} minutes

`;
      }

      // Profil utilisateur
      if (userProfile) {
        prompt += `**Profil de l'√©tudiant** :
- Niveau : ${userProfile.level || 'Non d√©fini'}
- Points totaux : ${userProfile.total_points || 0}
- Classe : ${userProfile.classe || 'Non d√©finie'}

`;
      }

      // ‚úÖ NOUVEAU: Analyser les r√©ponses d√©taill√©es si disponibles
      const answers = activity.data?.answers || [];
      if (answers.length > 0) {
        // Analyser par th√©matique
        const analysisByTopic = {};
        
        answers.forEach(answer => {
          const topic = answer.topic || 'G√©n√©ral';
          if (!analysisByTopic[topic]) {
            analysisByTopic[topic] = {
              correct: [],
              incorrect: []
            };
          }
          
          if (answer.is_correct) {
            analysisByTopic[topic].correct.push(answer);
          } else {
            analysisByTopic[topic].incorrect.push(answer);
          }
        });

        // Identifier les th√©matiques fortes (‚â•80% de r√©ussite)
        const strongTopics = [];
        const weakTopics = [];
        
        Object.entries(analysisByTopic).forEach(([topic, data]) => {
          const total = data.correct.length + data.incorrect.length;
          const successRate = data.correct.length / total;
          
          if (successRate >= 0.8 && total >= 2) {
            strongTopics.push({
              topic,
              correct: data.correct.length,
              total
            });
          } else if (successRate < 0.6 && total >= 2) {
            weakTopics.push({
              topic,
              incorrect: data.incorrect.length,
              total,
              errors: data.incorrect
            });
          }
        });

        // Ajouter l'analyse d√©taill√©e au prompt
        if (strongTopics.length > 0 || weakTopics.length > 0) {
          prompt += `**ANALYSE D√âTAILL√âE DES R√âPONSES** :

`;

          // Points forts
          if (strongTopics.length > 0) {
            prompt += `‚úÖ **Th√©matiques ma√Ætris√©es** (‚â•80% de r√©ussite) :\n`;
            strongTopics.forEach(({ topic, correct, total }) => {
              prompt += `- ${topic} : ${correct}/${total} correctes (${Math.round(correct/total*100)}%)\n`;
            });
            prompt += '\n';
          }

          // Points faibles avec d√©tails des erreurs
          if (weakTopics.length > 0) {
            prompt += `‚ö†Ô∏è **Th√©matiques √† renforcer** (<60% de r√©ussite) :\n`;
            weakTopics.forEach(({ topic, incorrect, total, errors }) => {
              prompt += `- ${topic} : ${incorrect}/${total} erreurs (${Math.round(incorrect/total*100)}%)\n`;
              
              // Lister les questions rat√©es (max 3 par th√©matique)
              if (errors.length > 0) {
                prompt += `  Questions rat√©es :\n`;
                errors.slice(0, 3).forEach((err, idx) => {
                  prompt += `  ${idx + 1}. "${err.question_text}" (r√©pondu ${err.user_answer} au lieu de ${err.correct_answer})\n`;
                });
                if (errors.length > 3) {
                  prompt += `  ... et ${errors.length - 3} autre(s) erreur(s)\n`;
                }
              }
            });
            prompt += '\n';
          }

          // Analyse par difficult√©
          const easyErrors = answers.filter(a => !a.is_correct && a.difficulty === 'facile').length;
          const mediumErrors = answers.filter(a => !a.is_correct && a.difficulty === 'moyen').length;
          const hardErrors = answers.filter(a => !a.is_correct && a.difficulty === 'difficile').length;
          
          if (easyErrors > 0 || mediumErrors > 0 || hardErrors > 0) {
            prompt += `**R√©partition des erreurs par niveau** :\n`;
            if (easyErrors > 0) prompt += `- Facile : ${easyErrors} erreur(s)\n`;
            if (mediumErrors > 0) prompt += `- Moyen : ${mediumErrors} erreur(s)\n`;
            if (hardErrors > 0) prompt += `- Difficile : ${hardErrors} erreur(s)\n`;
            prompt += '\n';
          }
        }
      }

      prompt += `Fournis une analyse structur√©e en format JSON avec exactement cette structure :
{
  "strengths": ["point fort 1", "point fort 2", ...],
  "weaknesses": ["point √† am√©liorer 1", "point √† am√©liorer 2", ...],
  "suggestions": [
    {
      "text": "conseil pratique 1",
      "chapterId": 123,
      "chapterTitle": "Titre du chapitre",
      "matiereId": 1
    },
    {
      "text": "conseil pratique 2",
      "chapterId": null,
      "chapterTitle": null,
      "matiereId": null
    },
    ...
  ],
  "message": "un message d'encouragement personnalis√© (2-3 phrases)"
}

**Chapitres disponibles pour liens** :
${relatedChapters.length > 0 ? relatedChapters.map(ch => `- ID ${ch.id}: ${ch.title} (Mati√®re ID: ${ch.matiere_id || 'N/A'})`).join('\n') : 'Aucun chapitre sp√©cifique disponible'}

**Crit√®res d'analyse** :
1. **Points forts** : Ce qui a bien fonctionn√© (pr√©cision, rapidit√©, compr√©hension...)
2. **Points √† am√©liorer** : Domaines n√©cessitant plus de travail
3. **Suggestions** : Conseils concrets et actionnables pour progresser
   - Si tu recommandes de r√©viser un concept pr√©sent dans les chapitres disponibles, ajoute le chapterId, chapterTitle ET matiereId
   - Sinon, laisse chapterId, chapterTitle et matiereId √† null
   - Priorise les suggestions avec liens vers les chapitres pertinents
4. **Message** : Encouragement adapt√© au niveau de performance

**Important** :
- Adapte ton langage au contexte s√©n√©galais (BFEM/BAC)
- Sois constructif et encourageant m√™me si le score est faible
- Fournis des conseils pratiques et r√©alisables
- Utilise un ton amical et motivant
- Pour les suggestions, si un chapitre est pertinent, AJOUTE TOUJOURS son ID, titre ET matiere_id
- R√©ponds UNIQUEMENT avec le JSON, sans texte avant ou apr√®s`;

      let adviceData;
      const provider = this.getAvailableProvider(preferredProvider);

      // ‚úÖ NOUVEAU: Support Perplexity (avec citations)
      if (provider === 'perplexity') {
        console.log('üü¢ [Contextual AI] Utilisation de Perplexity Sonar Pro pour les conseils...');
        try {
          const response = await fetch(this.perplexityBaseURL, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: 'sonar-pro',
              messages: [{
                role: 'system',
                content: 'Tu es un coach p√©dagogique expert sp√©cialis√© pour les √©tudiants s√©n√©galais. Tu fournis des analyses d√©taill√©es, constructives et encourageantes avec des ressources √©ducatives pertinentes.'
              }, {
                role: 'user',
                content: prompt
              }],
              max_tokens: 4096,
              temperature: 0.7,
              return_citations: true, // ‚úÖ Activer les citations pour liens externes
              stream: false
            })
          });

          if (!response.ok) {
            throw new Error(`Perplexity API error: ${response.status}`);
          }

          const data = await response.json();
          let text = data.choices?.[0]?.message?.content || '';
          text = text.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
          adviceData = JSON.parse(text);

          // ‚úÖ Ajouter les citations Perplexity si disponibles
          if (data.citations && data.citations.length > 0) {
            adviceData.externalResources = data.citations.slice(0, 5); // Max 5 liens
            console.log(`üîó [Perplexity] ${data.citations.length} citations ajout√©es`);
          }

          console.log('‚úÖ [Perplexity] Conseils g√©n√©r√©s avec succ√®s');

        } catch (perplexityError) {
          console.warn('‚ö†Ô∏è [Perplexity] √âchec, basculement vers Claude/Gemini:', perplexityError.message);
          
          // Fallback vers Claude
          if (this.claude) {
            const response = await this.claude.messages.create({
              model: 'claude-3-5-sonnet-20241022',
              max_tokens: 4096,
              system: 'Tu es un coach p√©dagogique expert sp√©cialis√© pour les √©tudiants s√©n√©galais.',
              messages: [{ role: 'user', content: prompt }]
            });
            let text = response.content[0].text.trim().replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
            adviceData = JSON.parse(text);
            console.log('‚úÖ [Claude AI] Conseils g√©n√©r√©s (fallback)');
          } else if (this.genAI) {
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            let text = response.text().trim().replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
            adviceData = JSON.parse(text);
            console.log('‚úÖ [Gemini] Conseils g√©n√©r√©s (fallback)');
          } else {
            throw new Error('Aucun provider IA disponible');
          }
        }
      }
      // ‚úÖ Claude AI en priorit√©
      else if (provider === 'claude') {
        console.log('üü£ [Contextual AI] Utilisation de Claude AI pour les conseils...');
        try {
          const response = await this.claude.messages.create({
            model: 'claude-3-5-sonnet-20241022',
            max_tokens: 4096,
            system: 'Tu es un coach p√©dagogique expert sp√©cialis√© pour les √©tudiants s√©n√©galais. Tu fournis des analyses d√©taill√©es, constructives et encourageantes.',
            messages: [{
              role: 'user',
              content: prompt
            }]
          });

          let text = response.content[0].text.trim();
          // Nettoyer le texte
          text = text.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
          
          adviceData = JSON.parse(text);
          console.log('‚úÖ [Claude AI] Conseils g√©n√©r√©s avec succ√®s');
          
        } catch (claudeError) {
          console.warn('‚ö†Ô∏è [Claude AI] √âchec, basculement vers Gemini:', claudeError.message);
          
          // Fallback vers Gemini
          if (this.genAI) {
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            let text = response.text().trim();
            text = text.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
            adviceData = JSON.parse(text);
            console.log('‚úÖ [Gemini] Conseils g√©n√©r√©s (fallback)');
          } else {
            throw new Error('Aucun provider IA disponible');
          }
        }
      } else if (provider === 'gemini') {
        // Utiliser Gemini directement
        console.log('üîµ [Contextual AI] Utilisation de Gemini pour les conseils...');
        const result = await this.model.generateContent(prompt);
        const response = await result.response;
        let text = response.text().trim();
        text = text.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
        adviceData = JSON.parse(text);
        console.log('‚úÖ [Gemini] Conseils g√©n√©r√©s avec succ√®s');
      }

      // ‚úÖ CACHE: Sauvegarder les conseils g√©n√©r√©s
      this.adviceCache.set(cacheKey, {
        advice: adviceData,
        timestamp: Date.now()
      });
      console.log('üíæ [Cache] Conseils sauvegard√©s:', cacheKey);

      console.log('‚úÖ [Contextual AI] Conseils g√©n√©r√©s:', adviceData);
      return adviceData;

    } catch (error) {
      console.error('‚ùå [Contextual AI] Erreur g√©n√©ration conseils:', error);
      
      // Retourner des conseils par d√©faut en cas d'erreur
      return this.getDefaultAdvice(activity);
    }
  }

  /**
   * Retourne des conseils par d√©faut en cas d'erreur IA
   */
  getDefaultAdvice(activity) {
    const score = activity.score || 0;
    
    const defaultAdvice = {
      strengths: [],
      weaknesses: [],
      suggestions: [],
      message: ''
    };

    if (score >= 70) {
      defaultAdvice.strengths = [
        'Excellente ma√Ætrise du sujet',
        'Bonne gestion du temps',
        'Compr√©hension solide des concepts'
      ];
      defaultAdvice.suggestions = [
        { text: 'Continue sur cette lanc√©e !', chapterId: null, chapterTitle: null },
        { text: 'Essaie des exercices plus avanc√©s', chapterId: null, chapterTitle: null },
        { text: 'Aide tes camarades √† progresser', chapterId: null, chapterTitle: null }
      ];
      defaultAdvice.message = 'Bravo ! Tes r√©sultats sont excellents. Continue ainsi !';
    } else if (score >= 50) {
      defaultAdvice.strengths = [
        'Bonne base de compr√©hension',
        'Effort notable'
      ];
      defaultAdvice.weaknesses = [
        'Quelques notions √† revoir',
        'Gestion du temps √† am√©liorer'
      ];
      defaultAdvice.suggestions = [
        { text: 'R√©vise les concepts mal compris', chapterId: null, chapterTitle: null },
        { text: 'Fais plus d\'exercices pratiques', chapterId: null, chapterTitle: null },
        { text: 'Demande de l\'aide sur les points difficiles', chapterId: null, chapterTitle: null }
      ];
      defaultAdvice.message = 'Bon travail ! Avec un peu plus de pratique, tu vas progresser rapidement.';
    } else {
      defaultAdvice.weaknesses = [
        'Difficult√©s sur plusieurs concepts',
        'Besoin de plus de pratique'
      ];
      defaultAdvice.suggestions = [
        { text: 'Reprends les bases du chapitre', chapterId: null, chapterTitle: null },
        { text: 'Pratique avec des exercices simples d\'abord', chapterId: null, chapterTitle: null },
        { text: 'N\'h√©site pas √† demander de l\'aide', chapterId: null, chapterTitle: null },
        { text: 'Prends ton temps pour bien comprendre', chapterId: null, chapterTitle: null }
      ];
      defaultAdvice.message = 'Ne te d√©courage pas ! Chaque erreur est une opportunit√© d\'apprendre. Continue tes efforts !';
    }

    return defaultAdvice;
  }

  /**
   * Helper pour obtenir le label d'un type d'activit√©
   */
  getActivityTypeLabel(type) {
    const labels = {
      'quiz_completed': 'Quiz',
      'exam_completed': 'Examen',
      'chapter_completed': 'Chapitre',
      'badge_earned': 'Badge'
    };
    return labels[type] || 'Activit√©';
  }
}

// Instance singleton
let contextualAIInstance = null;

/**
 * Initialise le service IA contextuel
 */
export const initializeContextualAI = (apiKey) => {
  if (!contextualAIInstance) {
    contextualAIInstance = new ContextualAIService(apiKey);
    console.log('ü§ñ [Contextual AI] Service initialis√© globalement');
  }
  return contextualAIInstance;
};

/**
 * Obtient l'instance du service IA contextuel
 */
export const getContextualAI = () => {
  if (!contextualAIInstance) {
    console.warn('‚ö†Ô∏è [Contextual AI] Service non initialis√©. Appelez initializeContextualAI() d\'abord.');
  }
  return contextualAIInstance;
};

/**
 * Fonction helper pour g√©n√©rer des conseils pour une activit√©
 */
export const generateAdviceForActivity = async (activity, userProfile) => {
  const ai = getContextualAI();
  if (!ai || !ai.isAvailable()) {
    return {
      error: true,
      message: 'Service IA non disponible'
    };
  }
  return await ai.generateAdviceForActivity(activity, userProfile);
};

/**
 * Fonction helper pour construire un prompt contextuel enrichi
 * @param {string} page - Page actuelle
 * @param {object} userContext - Contexte utilisateur (stats, progression, etc.)
 * @param {object} additionalContext - Contexte additionnel optionnel
 * @returns {string} Prompt syst√®me enrichi
 */
export const buildContextualPrompt = (page = 'Dashboard', userContext = {}, additionalContext = {}) => {
  const ai = getContextualAI();
  if (!ai) {
    console.warn('‚ö†Ô∏è [buildContextualPrompt] Service IA non initialis√©. Utilisation prompt par d√©faut.');
    return `Tu es un assistant IA intelligent pour la plateforme E-R√©ussite. Page actuelle: ${page}`;
  }
  
  // Construire section depuis additionalContext si pr√©sente
  const section = additionalContext.section || 'general';
  
  // Appeler la m√©thode de l'instance (sans le param√®tre message car on g√©n√®re juste le prompt syst√®me)
  return ai.buildContextualPrompt('', page, section, userContext, JSON.stringify(additionalContext));
};

export default ContextualAIService;
